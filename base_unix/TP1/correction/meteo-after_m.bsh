#!/bin/bash
DEBUG=1
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0"
DLS="downloads"
ANALYSES="analyses"
MAPPINGS="mappings"
KNOWN_MAPPINGS="$MAPPINGS/mappings.txt"
URL_METEOFRANCE="https://meteofrance.com/previsions-meteo-france/TOWN/ZIP"
URL_MAPPING="https://datanova.legroupe.laposte.fr/api/records/1.0/search/?dataset=laposte_hexasmal&q=PARAM&lang=fr&rows=3&facet=nom_de_la_commune&facet=code_postal"

function messageOnStderr () {
    echo "$1" 2>&1
}

LINE=1
function debug () {
    if [ "$DEBUG" != 0 ]; then
		echo "$LINE>> '$*'" >/dev/tty
		((LINE=LINE+1))
	fi
}

function clearDownloads () {
   [ -d "$DLS" ] && rm -r "$DLS"
}

function clearMappings () {
   [ -d "$MAPPINGS" ] && rm -r "$MAPPINGS"
}

function eraseAnalyses () {
   [ -d "$ANALYSES" ] && rm -r "$ANALYSES"
}

function before () {
	[ ! -d "$DLS" ] && mkdir "$DLS"
	[ ! -d "$ANALYSES" ] && mkdir "$ANALYSES"
	[ ! -d "$MAPPINGS" ] && mkdir "$MAPPINGS"
	[ ! -f "$KNOWN_MAPPINGS" ] && cat < /dev/null > "$KNOWN_MAPPINGS"
}

function option_i () {
    messageOnStderr "init"
	clearMappings
	clearDownloads
	eraseAnalyses
}

function option_c () {
    messageOnStderr "clear"
	clearDownloads
}

function option_e () {
    messageOnStderr "erase"
	eraseAnalyses
}

function buildMeteoFranceFilename () {
    day=`date "+%m_%d_%Y"`
	echo "$DLS/$1-$2-$day.html"
}

function buildMeteoFranceURL () {
   sed -e "s/TOWN/$1/" -e "s/ZIP/$2/"
}

function buildMappingFilename () {
	echo "$MAPPINGS/local.json"
}

function buildMappingURL () {
	param=""
	param=${param:-$1}
	param=${param:-$2}
	sed -e "s/PARAM/$param/"
}

function downloadFromMeteoFrance () {
   FILENAME=`buildMeteoFranceFilename "$1" "$2"`
   if [ ! -f "$FILENAME" ]; then
      URL=`echo "$URL_METEOFRANCE" | buildMeteoFranceURL "$1" "$2"`
      debug "download weather required for #$1# #$2# : $URL"
      curl -A "$USER_AGENT" "$URL" > "$FILENAME"
   fi
}

function downloadMapping () {
   URL=`echo "$URL_MAPPING" | buildMappingURL "$1" "$2"`
   debug "download mapping required for #$1# #$2#"
   curl -A "$USER_AGENT" "$URL" > "$3"
}

function extractMappingFromJson () {
   zip=${1:-[^\"]*}
   town=${2:-[^\"]*}
   debug "extractMapping for #$zip# #$town# on #$3#"
   sed -n 's!.*"nom_de_la_commune": "\('"$town"'\)",[^,]*, "code_postal": "\('"$zip"'\)",.*!\2:\1!pI' < "$3" | tr [A-Z] [a-z]
}

function selectFromKnownMappings () {
   zip=${1:-[^:]*}
   town=${2:-.*}
   grep -i "^$zip:$town\$" < "$KNOWN_MAPPINGS"
}

function insertInKnownMappings () {
   [ ! -z "$3" ] && [ -z `selectFromKnownMappings "$1" "$2"` ] && echo "$3" >> "$KNOWN_MAPPINGS"
}

function getMapping () {
   mapping=`selectFromKnownMappings "$1" "$2"`
   if [ -z "$mapping" ]; then
      target=`buildMappingFilename`
      downloadMapping "$1" "$2" "$target"
      mapping=`extractMappingFromJson "$1" "$2" "$target"`
	  insertInKnownMappings "$1" "$2" "$mapping"
   fi
   echo "$mapping"
}

function option_m () {
    messageOnStderr "meteo of $1"
	param="$1"
	town=""
	zip=""
	if expr "$param" + "0" 2>/dev/null >/dev/null; then
		zip="$param"
	else
		town="$param"
	fi
	mapping=`getMapping "$zip" "$town"`
	if [ ! -z "$mapping" ]; then 
		zip=`echo $mapping | cut -d: -f1`
		town=`echo $mapping | cut -d: -f2`
		downloadFromMeteoFrance "$town" "$zip"
	fi
}

function option_s () {
    messageOnStderr "safe of $1"
}

function option_a () {
    messageOnStderr "analyse"
}

function option_w () {
    messageOnStderr "web for $1 at $2"
}

function option_t () {
    messageOnStderr "cheat with $1"
}

function help () {
    {
        echo "meteo [option]*"
        echo "  -i"
        echo "  -c"
        echo "  -e"
        echo "  -m town"
        echo "  -s town"
        echo "  -w town day"
        echo "  -t day"
        echo "  -h"
    } 2>&1
}

function error () {
    messageOnStderr "error $1"
    exit 1
}

before
while [ "$#" != "0" ]; do
	case "$1" in
	-i) option_i;;
	-c) option_c;;
	-e) option_e;;
	-m) option_m "$2"; shift;;
	-s) option_s "$2"; shift;;
	-a) option_a;;
	-w) option_w "$2" "$3"; shift; shift;;
	-t) option_t "$2"; shift;;
	-h) help;;
	*) error "wrong option $1";;
	esac
    shift 1
done
