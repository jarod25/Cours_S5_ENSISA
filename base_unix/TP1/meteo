#!/bin/bash

CACHE_DIR="./CACHE"
DOWNLOADS_DIR="./DOWNLOADS"
ANALYSIS_DIR="./ANALYSIS"
POSTCODE_CITY_FILE="code_ville.txt"

function rm_cache() {
    echo "Efface le cache"
    if [ -d "$CACHE_DIR" ]; then
        rm -rf "$CACHE_DIR"/*
    else
        echo "Repertoire $CACHE_DIR n'existe pas, creation en cours"
        mkdir -p "$CACHE_DIR"
    fi
}

function rm_downloads() {
    echo "Efface les téléchargements"
    if [ -d "$DOWNLOADS_DIR" ]; then
        rm -rf "$DOWNLOADS_DIR"/*
    else
        echo "Repertoire $DOWNLOADS_DIR n'existe pas, creation en cours"
        mkdir -p "$DOWNLOADS_DIR"
    fi
}

function rm_analysis() {
    echo "Efface les analyses"
    if [ -d "$ANALYSIS_DIR" ]; then
        rm -rf "$ANALYSIS_DIR"/*
    else
        echo "Repertoire $ANALYSIS_DIR n'existe pas, creation en cours"
        mkdir -p "$ANALYSIS_DIR"
    fi
}

function save_code_postal_ville() {
    if [[ -z "$1" || -z "$2" ]]; then
        return "SCPV_Erreur : vous devez donner un code postal et une ville"
    else
        # local formated_city=$(echo "$2" | sed -e 's/ /-/g' -e "s/'/-/g")
        local result=$(check_code_ville "$2")
        if [[ "$result" == "false" ]]; then
            echo "$1:$2" >> $CACHE_DIR/$POSTCODE_CITY_FILE
        fi
    fi
}

function check_code_ville() {
    if [[ -z "$1" ]]; then
        return "CCV_Erreur : vous devez renseigner un code postal ou une ville"
    else
        if [[ ! -f "$CACHE_DIR/$POSTCODE_CITY_FILE" ]]; then
            cat /dev/null >> $CACHE_DIR/$POSTCODE_CITY_FILE
            echo "false"
        else
            local result=$(grep -i -m 1 "$1" "$CACHE_DIR/$POSTCODE_CITY_FILE") # -i pour ignorer les majuscules / minuscules, -m 1 pour limiter à un seul résultat (du coup le premier)
            if [[ -n "$result" ]]; then
                echo "$result"
            else
                echo "false"
            fi
        fi
    fi
}

function get_code_ville() {
    if [[ -z "$1" ]]; then
        return "GCV1_Erreur : vous devez renseigner un code postal ou une ville"
    else
        local postcode
        local city
        local formated_city=$(echo "$1" | sed -e 's/ /-/g' -e "s/'/-/g")
        local result=$(check_code_ville "$formated_city")
        if [[ "$result" != "false" ]]; then
            postcode="${result%%:*}"  # Partie avant ":"
            city="${result#*:}"  # Partie après ":"
        else
            local api="https://api-adresse.data.gouv.fr/search/?q=$formated_city&limit=1&type=municipality"
            local api_result=$(curl -s "$api")
            postcode=$(echo "$api_result" | jq -r '.features[0].properties.postcode')
            city=$(echo "$api_result" | jq -r '.features[0].properties.city')
            city=$(echo "$city" | sed -e 's/ /-/g' -e "s/'/-/g")
            if [[ -z "$postcode" ]]; then
                return "GCV2_Erreur : impossible de trouver le code postal pour $1"
            else 
                if [[ -z "$city" ]]; then
                    return "GCV3_Erreur : impossible de trouver la ville pour $1"
                fi
            fi
            save_code_postal_ville "$postcode" "$city"
        fi
        echo "$postcode" "$city"
    fi
}

function is_page_already_download() {
    if [[ -z "$1" ]]; then
        echo "false"
    else
        echo "true"
    fi
}

function donwload_page_online() {
    if [[ -z "$1" ]]; then
        return "DPO_Erreur : vous devez renseigner un code postal ou une ville"
    else
        local result
        RSLT=' ' read -r -a result <<< "$(get_code_ville "$1")" # Le nom de la variable devant le = n'a aucune importance, c'est juste pour définir qu'on va utiliser ' ' comme séparateur
        local postcode=${result[0]}
        local city=${result[1]}
        city=$(echo "$city" | sed -e 's/ /-/g' -e "s/'/-/g")
        local already_download=$(is_page_already_download)
        if [[ "$already_download" != "true" ]]; then
            local meteo_url="https://meteofrance.com/previsions-meteo-france/$city/$postcode"
        else
            echo "toto"
        fi
        echo $meteo_url
    fi
}

function opt_i() {
    echo "Initialisation"
    rm_cache
    rm_downloads
    rm_analysis
}

function opt_c() {
    echo "Effacement des téléchargements précédents"
    rm_downloads
}

function opt_e() {
    echo "Effacement des analyses précédentes"
    rm_analysis
}

function opt_m() {
    if [[ -z "$1" ]]; then
        return "OM_Erreur : Option -m nécessite un paramètre (code postal ou nom de ville)"
    else
        echo "Téléchargement de la page météo pour la ville : $1"
        donwload_page_online "$1"
    fi
}

function opt_s() {
    if [[ -z "$1" ]]; then
        return "OS_Erreur : Option -s nécessite un paramètre (code postal ou nom de ville)"
    else
        echo "Téléchargement simulé de la météo pour la ville : $1"

    fi
}

function opt_a() {
    echo "Analyse des fichiers téléchargés"

}

function opt_w() {
        if [[ -z "$1" || -z "$2" ]]; then
        return "OW_Erreur : Option -w nécessite deux paramètres ((code postal ou nom de ville) et jour)"
    else
        echo "Création de la page web pour la ville : $1 et le jour : $2"

    fi
}

function opt_t() {
        if [[ -z "$1" ]]; then
        return "OT_Erreur : Option -t nécessite un paramètre (jour de décalage)"
    else
        echo "Triche avec le paramètre : $1"

    fi
}

function opt_h() {
    echo "Aide :"
    echo
    echo "Commande : ./meteo [options]"
    echo
    echo "Options :"
    echo "  -i            Initialisation"
    echo
    echo "  -c            Effacement des téléchargements précédents."
    echo
    echo "  -e            Effacement des analyses précédentes."
    echo
    echo "  -m ville      Téléchargement de la page web de météo France qui décrit la météo pour la ville donnée en paramètre."
    echo "                Une ville peut être décrite par son nom ou son code postal."
    echo
    echo "  -s ville      Cette option marche comme -m mais remplace l'URL officielle pour atteindre un site local qui héberge"
    echo "                les pages précédemment téléchargées. Cette option simule un téléchargement réel."
    echo
    echo "  -a            Analyse l'ensemble des fichiers préalablement téléchargés. Si vous avez rien téléchargé, il ne se passe"
    echo "                rien. Si vous n'avez utilisé l'option -m qu'une fois, vous ne devrez analyser que ce fichier. Par contre,"
    echo "                si vous avez utilisé -m 4 fois, je peux supposer que vous avez 4 fichiers temporaires qu'il faudra donc"
    echo "                analyser. De plus, si vous faites deux fois de suite l'option -a, j'aurais une double extraction des données."
    echo "                C'est la vie."
    echo
    echo "  -w ville jour Fabrication de la page web qui portera le nom <<ville>>-<<jour>>.html. Cette page extrait de la base"
    echo "                des données météo l'ensemble des entrées qui concerne la ville au jour donné sous une forme tabulaire."
    echo
    echo "  -t n          Triche"
    echo
    echo "  -h            Affichage de cette aide"
}


function meteo() {
    if [[ -z "$1" ]]; then
        echo "Vous devez passer des arguments pour cette utiliser cette commande, -h pour avoir l'aide"
    else
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -i) opt_i ;;
                -c) opt_c ;;
                -e) opt_e ;;
                -m)
                    opt_m "$2"
                    shift
                    ;;
                -s)
                    opt_s "$2"
                    shift
                    ;;
                -a) opt_a ;;
                -w)
                    opt_w "$2" "$3"
                    shift 2
                    ;;
                -t)
                    opt_t "$2"
                    shift
                    ;;
                -h) opt_h ;;
                -*) echo "Option non valide : $1. Utilisez -h pour voir l'aide." ;;
            esac
            shift
        done
    fi
}


meteo "$@"

# curl -s $meteo_url
# brave --headless --disable-gpu --dump-dom --enable-unsafe-swiftshader "$url" > "$fichier"